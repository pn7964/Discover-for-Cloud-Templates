AWSTemplateFormatVersion: '2010-09-09'
Description: This template sets up a cross account IAM role in order to
  enable CrowdStrike Falcon Discover for AWS functionality.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Cross Account IAM Role.
        Parameters:
          - RoleName
          - ExternalID
          - CSAccountNumber
          - CSAssumingRoleName
      - Label:
          default: Central Bucket Parameters
        Parameters:
          - CentralCloudTrailBucketName
          - CentralCloudTrailName
          - LogsRetentionInDays
      - Label:
          default: General CloudTrail Options
        Parameters:
          - MultiRegion
          - IncludeGlobalEvents
          - EnableLogFileValidation
          - AWSLogsS3KeyPrefix
          - PublishToCloudWatchLogs
          - ResourceNamePrefix
      - Label:
          default: CrowdStrike API Keys
        Parameters:
          - FalconClientId
          - FalconSecret

    ParameterLabels:
      CentralCloudTrailBucketName:
        default: Centralized CloudTrail Bucket Name
      CentralCloudTrailName:
        default: Centralized CloudTrail Name
      RoleName:
        default: IAM Role Name
      ExternalID:
        default: External ID
      CSAccountNumber:
        default: AWS Account ID to Grant Permission. Do not modify
      CSAssumingRoleName:
        default: Assuming IAM Role Name.  Do not modify

Outputs:
  RoleARN:
    Description: The ARN of the role that can be assumed by the other account.
    Value: !GetAtt 'iamRole.Arn'
Parameters:
  CentralCloudTrailBucketName:
    Description: Centralized CloudTrail S3 bucket that will recieve logs from this account and from others (must already exist).
    Type: String
    Default: "organization-cloudtrail-logs"

  CentralCloudTrailName:
    Description: 'Name given to the Centralized CloudTrail logs configuration'
    Type: String
    Default: "organization-cloudtrail-logging-acct"

  FalconClientId:
    Description: Falcon OAuth2 Client ID.
    Type: String
    NoEcho: 'true'

  FalconSecret:
    Description: Falcon Oath2 API secret.
    Type: String
    NoEcho: 'true'

  ExternalID:
    Description: The External ID that will be required to assume the role.
    MinLength: '1'
    Type: String

  RoleName:
    Description: The name of the cross account IAM role to be created.
    MinLength: '1'
    Type: String
    Default: CrowdStrikeFalcon

  LogArchiveBucketRegion:
    Type: String
    Description: Log archive bucket region
    Default: eu-west-1

  CSAccountNumber:
    AllowedPattern: '[0-9]+'
    Description: The 12 digit AWS account number to grant access to.
    MaxLength: '12'
    MinLength: '12'
    Type: String
    Default: 292230061137

  CSAssumingRoleName:
    Description: Name of the IAM role used within CrowdStrike to assume access to
      your account.
    Type: String
    Default: "CS-Prod-HG-CsCloudconnectaws"

  LogArchiveAccount:
    Type: String
    Description: AccountId of Log Archive Bucket

  EnableLogFileValidation:
    Description: Indicates whether CloudTrail validates the integrity of log files.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  IncludeGlobalEvents:
    Description: Indicates whether the trail is publishing events from global services, such as IAM, to the log files.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  MultiRegion:
    Description: Indicates whether the CloudTrail trail is created in the region in which you create the stack (false) or in all regions (true).
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  AWSLogsS3KeyPrefix:
    Type: 'String'
    Description: 'Organization ID to use as the S3 Key prefix for storing the audit logs'

  PublishToCloudWatchLogs:
    Type: String
    Default: 'true'
    Description: Indicates whether notifications are published to CloudWatch Logs.
    AllowedValues:
      - 'true'
      - 'false'

  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain CloudTrail log events in the CloudWatch Logs.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  ResourceNamePrefix:
    Type: 'String'
    Description: 'Prefix for the managed resources'

  LambdaFunctionsBucketName:
    Type: String
    Description: S3 bucket where the lambda files are located. (Must be in the same region)


Conditions:
  IsMultiRegion: !Equals
    - !Ref MultiRegion
    - 'true'

  IsPublishToCloudWatchLogs: !Equals
    - !Ref PublishToCloudWatchLogs
    - 'true'

Resources:
  CentralizedCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      EnableLogFileValidation: !Ref EnableLogFileValidation
      IncludeGlobalServiceEvents: !If
        - IsMultiRegion
        - True
        - !Ref IncludeGlobalEvents
      S3KeyPrefix: !Ref AWSLogsS3KeyPrefix
      IsLogging: true
      IsMultiRegionTrail: !Ref MultiRegion
      S3BucketName: !Ref 'CentralCloudTrailBucketName'
      TrailName: !Ref CentralCloudTrailName
      CloudWatchLogsLogGroupArn: !If
        - IsPublishToCloudWatchLogs
        - !GetAtt TrailLogGroup.Arn
        - !Ref AWS::NoValue
      CloudWatchLogsRoleArn: !If
        - IsPublishToCloudWatchLogs
        - !GetAtt TrailLogGroupRole.Arn
        - !Ref AWS::NoValue

  TrailLogGroupRole:
    Type: 'AWS::IAM::Role'
    Condition: IsPublishToCloudWatchLogs
    Properties:
      RoleName: !Sub ${ResourceNamePrefix}-CloudWatchLogsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudTrailAssumeRole
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'cloudtrail-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AWSCloudTrailCreateLogStream
                Effect: Allow
                Action: 'logs:CreateLogStream'
                Resource: !GetAtt 'TrailLogGroup.Arn'
              - Sid: AWSCloudTrailPutLogEvents
                Effect: Allow
                Action: 'logs:PutLogEvents'
                Resource: !GetAtt 'TrailLogGroup.Arn'

  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: IsPublishToCloudWatchLogs
    Properties:
      LogGroupName: !Sub ${ResourceNamePrefix}/CloudTrailLogs
      RetentionInDays: !Ref LogsRetentionInDays

  iamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref 'RoleName'
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'ExternalID'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'CSAccountNumber'
                  - :role/
                  - !Ref 'CSAssumingRoleName'
            Sid: ''
        Version: '2012-10-17'
      Path: /
  iamPolicyDescribeAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DescribeAPICalls
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeImages
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeVolumes
              - ec2:DescribeVpcs
              - ec2:DescribeRegions
              - ec2:DescribeSubnets
              - ec2:DescribeNetworkAcls
              - ec2:DescribeSecurityGroups
              - iam:ListAccountAliases
            Effect: Allow
            Resource: '*'
            Sid: ''
        Version: '2012-10-17'
      Roles:
        - !Ref 'iamRole'


  lambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: layer.zip
      Description: Layer for requests package
      LayerName: requests-package


  manageInstanceFalconAPI:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          central_s3_bucket_account: !Ref LogArchiveAccount
          cloudtrail_bucket_region: !Ref LogArchiveBucketRegion
          iam_role_arn: !GetAtt "iamRole.Arn"
          CSAccountNumber: !Ref CSAccountNumber
          CSAssumingRoleName: !Ref CSAssumingRoleName
          LocalAccount: !Ref AWS::AccountId
          aws_region: !Ref AWS::Region
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: register_new_account.zip
      Layers:
        - !Ref lambdaLayer
      Handler: register_new_account.lambda_handler
      MemorySize: 128
      Role: !GetAtt "CrowdStrikeRegisterAcctLambdaRole.Arn"
      Runtime: python3.7
      Timeout: 60

  TriggerLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn:
      - CrowdStrikeRegisterAcctLambdaRole
    Properties:
      FalconSecret: !Ref FalconSecret
      FalconClientId: !Ref FalconClientId
      ExternalID: !Ref ExternalID
      ServiceToken: !GetAtt
        - manageInstanceFalconAPI
        - Arn

  CrowdStrikeRegisterAcctLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrowdStrikeRegisterAcctLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess

